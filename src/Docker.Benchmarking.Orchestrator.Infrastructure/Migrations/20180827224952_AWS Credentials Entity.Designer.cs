// <auto-generated />
using System;
using Docker.Benchmarking.Orchestrator.Infrastrcture.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Docker.Benchmarking.Orchestrator.Infrastrcture.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20180827224952_AWS Credentials Entity")]
    partial class AWSCredentialsEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.ApacheJmeterTestFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTimeOffset>("DateTimeCreated");

                    b.Property<string>("Description");

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ApacheJmeterTestFiles");
                });

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid?>("ApacheJmeterTestId");

                    b.Property<Guid?>("ApplicationImageId");

                    b.Property<int>("ApplicationType");

                    b.Property<Guid?>("BenchmarkingImageId");

                    b.Property<Guid?>("DatabaseImageId");

                    b.Property<DateTimeOffset>("DateTimeCreated");

                    b.Property<int>("DelayToStartApplication");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("TestFileId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationImageId");

                    b.HasIndex("BenchmarkingImageId");

                    b.HasIndex("DatabaseImageId");

                    b.HasIndex("TestFileId");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.AzureCredientials", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("ClientId")
                        .IsRequired();

                    b.Property<DateTimeOffset>("DateTimeCreated");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Secret")
                        .IsRequired();

                    b.Property<string>("SubscriptionId")
                        .IsRequired();

                    b.Property<string>("TenantId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AzureCredentials");
                });

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.AzureHost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("AzureRegion")
                        .IsRequired();

                    b.Property<DateTimeOffset>("DateTimeCreated");

                    b.Property<bool>("DestroyResourcesAfterBenchmark");

                    b.Property<Guid?>("DockerHostId");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTimeOffset>("ResourceCreatedAt");

                    b.Property<DateTimeOffset>("ResourceDestroyedAt");

                    b.Property<Guid?>("TemplateId");

                    b.HasKey("Id");

                    b.HasIndex("DockerHostId")
                        .IsUnique();

                    b.HasIndex("TemplateId");

                    b.ToTable("AzureHosts");
                });

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.AzureVMTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTimeOffset>("DateTimeCreated");

                    b.Property<int>("DeploymentType");

                    b.Property<double>("DiskSize");

                    b.Property<double>("Memory");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ParametersDefault")
                        .IsRequired();

                    b.Property<decimal>("PricePerHour");

                    b.Property<string>("Template")
                        .IsRequired();

                    b.Property<string>("VMSize")
                        .IsRequired();

                    b.Property<double>("vCPUs");

                    b.HasKey("Id");

                    b.ToTable("AzureVMTemplate");
                });

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.BenchmarkExperiment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid?>("ApacheJmeterTestId");

                    b.Property<double>("ApdexFustrated");

                    b.Property<double>("ApdexSatisfied");

                    b.Property<double>("ApdexScore");

                    b.Property<double>("ApdexTSeconds");

                    b.Property<double>("ApdexTolerating");

                    b.Property<string>("AppContainerId");

                    b.Property<Guid>("ApplicationHostId");

                    b.Property<Guid>("ApplicationId");

                    b.Property<double>("AverageLatecy");

                    b.Property<double>("AverageReceivedBytes");

                    b.Property<double>("AverageResponseTime");

                    b.Property<double>("AverageSentBytes");

                    b.Property<string>("BenchmarkContainerId");

                    b.Property<Guid>("BenchmarkHostId");

                    b.Property<int>("BenchmarkTimeLength");

                    b.Property<double>("BlockInputTotal");

                    b.Property<double>("BlockOutputTotal");

                    b.Property<double>("CPUPercentageHighest");

                    b.Property<double>("CPUPercentageLowest");

                    b.Property<double>("CPUPercentageMean");

                    b.Property<double>("CPUPercentageRange");

                    b.Property<double>("CPUStandDeviation");

                    b.Property<double>("CPUStandDeviationSample");

                    b.Property<bool>("CaptureContainerMetrics");

                    b.Property<string>("Comments");

                    b.Property<bool>("Completed");

                    b.Property<DateTimeOffset>("CompletedAt");

                    b.Property<int>("ConcurrentUsers");

                    b.Property<DateTimeOffset>("DateTimeCreated");

                    b.Property<string>("Description");

                    b.Property<string>("EnvironmentVariables");

                    b.Property<string>("HangfireContainerMetricsJobId");

                    b.Property<bool>("JmeterResultsProcessed");

                    b.Property<double>("MaxLatency");

                    b.Property<double>("MaxResponseTime");

                    b.Property<double>("Memory");

                    b.Property<double>("MemoryPercentageHighest");

                    b.Property<double>("MemoryPercentageLowest");

                    b.Property<double>("MemoryPercentageMean");

                    b.Property<double>("MemoryPercentageRange");

                    b.Property<double>("MemoryStandDeviation");

                    b.Property<double>("MemoryStandDeviationSample");

                    b.Property<double>("MinLatency");

                    b.Property<double>("MinResponseTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("NetworkInputTotalBytes");

                    b.Property<double>("NetworkOutputTotalBytes");

                    b.Property<int>("NumberOfErrors");

                    b.Property<int>("NumberOfSamples");

                    b.Property<string>("ResultsCsv")
                        .HasColumnType("Text");

                    b.Property<bool>("SetAsBaseLine");

                    b.Property<double>("StandardDeviationSameWebServerResponse");

                    b.Property<double>("StandardDeviationWebServerResponse");

                    b.Property<bool>("Started");

                    b.Property<DateTimeOffset>("StartedAt");

                    b.Property<bool>("StopAppContainerAfterExperiment");

                    b.Property<Guid?>("TestFileId");

                    b.Property<string>("TestPlanVariableOverrides");

                    b.Property<double>("TotalReceivedBytes");

                    b.Property<double>("TotalSentBytes");

                    b.Property<int>("TypeOfTest");

                    b.Property<DateTimeOffset>("WebServerEndTime");

                    b.Property<DateTimeOffset>("WebServerStartTime");

                    b.Property<double>("vCPU");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationHostId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("BenchmarkHostId");

                    b.HasIndex("TestFileId");

                    b.ToTable("BenchmarkExperiments");
                });

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.BenchmarkTestItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<double>("AllThreads");

                    b.Property<Guid?>("BenchmarkExperimentId");

                    b.Property<double>("Bytes");

                    b.Property<double>("Connect");

                    b.Property<string>("DataType");

                    b.Property<DateTimeOffset>("DateTimeCreated");

                    b.Property<double>("Elapsed");

                    b.Property<string>("FailureMessage");

                    b.Property<double>("GroupThreads");

                    b.Property<double>("IdleTime");

                    b.Property<string>("Label")
                        .IsRequired();

                    b.Property<double>("Latency");

                    b.Property<string>("Name");

                    b.Property<int?>("ResponseCode");

                    b.Property<string>("ResponseMessage")
                        .IsRequired();

                    b.Property<double>("SentBytes");

                    b.Property<bool>("Success");

                    b.Property<string>("ThreadName")
                        .IsRequired();

                    b.Property<DateTimeOffset>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("BenchmarkExperimentId");

                    b.ToTable("BenchmarkTestItems");
                });

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.ContainerMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid>("BenchmarkExperimentId");

                    b.Property<double>("BlockInput");

                    b.Property<double>("BlockOutput");

                    b.Property<double>("CPUPercentage");

                    b.Property<string>("ContainerId")
                        .IsRequired();

                    b.Property<string>("ContainerName")
                        .IsRequired();

                    b.Property<DateTimeOffset>("DateTimeCreated");

                    b.Property<DateTime>("DockerDateTimestamp");

                    b.Property<double>("MemoryLimit");

                    b.Property<double>("MemoryUsage");

                    b.Property<string>("Name");

                    b.Property<double>("NetworkInput");

                    b.Property<double>("NetworkOutput");

                    b.HasKey("Id");

                    b.HasIndex("BenchmarkExperimentId");

                    b.ToTable("ContainerMetrics");
                });

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.DockerHost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid?>("AzureHostId");

                    b.Property<int>("CloudProvider");

                    b.Property<DateTimeOffset>("DateTimeCreated");

                    b.Property<string>("Description");

                    b.Property<string>("HostName")
                        .IsRequired();

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<double>("Memory");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password");

                    b.Property<int>("PortNumber");

                    b.Property<double>("Storage");

                    b.Property<bool>("UseHttpAuthentication");

                    b.Property<bool>("UseTlsAuthentication");

                    b.Property<string>("UserName");

                    b.Property<double>("vCPU");

                    b.HasKey("Id");

                    b.ToTable("DockerHosts");
                });

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.DockerImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTimeOffset>("DateTimeCreated");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalPort");

                    b.Property<string>("ImageName")
                        .IsRequired();

                    b.Property<string>("ImageTag")
                        .IsRequired();

                    b.Property<int>("ImageType");

                    b.Property<int?>("InternalPort");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("PrivateRepository");

                    b.Property<string>("PrivateRepositoryHost");

                    b.Property<string>("PrivateRepositoryPassword");

                    b.Property<string>("PrivateRepositoryUsername");

                    b.HasKey("Id");

                    b.ToTable("DockerImage");
                });

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.Application", b =>
                {
                    b.HasOne("Docker.Benchmarking.Orchestrator.Core.Entities.DockerImage", "ApplicationImage")
                        .WithMany()
                        .HasForeignKey("ApplicationImageId");

                    b.HasOne("Docker.Benchmarking.Orchestrator.Core.Entities.DockerImage", "BenchmarkingImage")
                        .WithMany()
                        .HasForeignKey("BenchmarkingImageId");

                    b.HasOne("Docker.Benchmarking.Orchestrator.Core.Entities.DockerImage", "DatabaseImage")
                        .WithMany()
                        .HasForeignKey("DatabaseImageId");

                    b.HasOne("Docker.Benchmarking.Orchestrator.Core.Entities.ApacheJmeterTestFile", "TestFile")
                        .WithMany("Applications")
                        .HasForeignKey("TestFileId");
                });

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.AzureHost", b =>
                {
                    b.HasOne("Docker.Benchmarking.Orchestrator.Core.Entities.DockerHost", "DockerHost")
                        .WithOne("AzureHost")
                        .HasForeignKey("Docker.Benchmarking.Orchestrator.Core.Entities.AzureHost", "DockerHostId");

                    b.HasOne("Docker.Benchmarking.Orchestrator.Core.Entities.AzureVMTemplate", "Template")
                        .WithMany("AzureHosts")
                        .HasForeignKey("TemplateId");
                });

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.BenchmarkExperiment", b =>
                {
                    b.HasOne("Docker.Benchmarking.Orchestrator.Core.Entities.DockerHost", "Host")
                        .WithMany("BenchmarkExperiments")
                        .HasForeignKey("ApplicationHostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Docker.Benchmarking.Orchestrator.Core.Entities.Application", "Application")
                        .WithMany("Benchmarks")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Docker.Benchmarking.Orchestrator.Core.Entities.DockerHost", "BenchmarkHost")
                        .WithMany("BenchmarkTests")
                        .HasForeignKey("BenchmarkHostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Docker.Benchmarking.Orchestrator.Core.Entities.ApacheJmeterTestFile", "TestFile")
                        .WithMany("BenchmarkExperiments")
                        .HasForeignKey("TestFileId");
                });

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.BenchmarkTestItem", b =>
                {
                    b.HasOne("Docker.Benchmarking.Orchestrator.Core.Entities.BenchmarkExperiment", "BenchmarkExperiment")
                        .WithMany("TestResults")
                        .HasForeignKey("BenchmarkExperimentId");
                });

            modelBuilder.Entity("Docker.Benchmarking.Orchestrator.Core.Entities.ContainerMetric", b =>
                {
                    b.HasOne("Docker.Benchmarking.Orchestrator.Core.Entities.BenchmarkExperiment", "BenchmarkExperiment")
                        .WithMany("ContainerMetrics")
                        .HasForeignKey("BenchmarkExperimentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
