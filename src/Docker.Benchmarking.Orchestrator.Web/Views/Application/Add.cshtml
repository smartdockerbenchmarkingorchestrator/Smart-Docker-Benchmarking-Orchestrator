@model Docker.Benchmarking.Orchestrator.Web.ViewModels.AddApplicationViewModel
@inject IJsonHelper Json
@{
    ViewData["Title"] = "Add New Application";
}

<h1 class="h2">@ViewData["Title"]</h1>

<hr />
<form asp-action="Add" asp-controller="Application" method="post">
    <div class="row">
        <div class="col-md-12">
            <div asp-validation-summary="All" class="text-danger"></div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ApplicationType" class="control-label"></label>
                <select asp-for="ApplicationType" class="form-control js-example-basic-single input-lg" asp-items="Html.GetEnumSelectList<Docker.Benchmarking.Orchestrator.Core.Enums.ApplicationType>()">
                    <option selected="selected" value="">Please select an application type</option>
                </select>
                <span asp-validation-for="ApplicationType" class="text-danger"></span>
            </div>
            
            <div class="form-group">
                <label asp-for="ApacheTestFileId" class="control-label"></label>
                <select asp-for="ApacheTestFileId" asp-items="@Model.ApacheTestFiles" class="form-control js-example-basic-single input-lg">
                    <option selected="selected" value="">Please select the apache testfile to use for the benchmark</option>
                </select>
                <span asp-validation-for="ApacheTestFileId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DelayToStartApplication" class="control-label"></label>
                <input asp-for="DelayToStartApplication" class="form-control" />
                <span asp-validation-for="DelayToStartApplication" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="ApplicationImage" class="control-label"></label>
                <select asp-for="ApplicationImage" asp-items="@Model.ApplicationImages" class="form-control js-example-basic-single input-lg">
                    <option selected="selected" value="">Please select an image to associate to the application</option>
                </select>
                <span asp-validation-for="ApplicationImage" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="BenchmarkingImage" class="control-label"></label>
                <select asp-for="BenchmarkingImage" asp-items="@Model.BenchmarkingImages" class="form-control js-example-basic-single input-lg">
                    <option selected="selected" value="">Please select an image to start benchmarking experiment for application</option>
                </select>
                <span asp-validation-for="BenchmarkingImage" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DatabaseImage" class="control-label"></label>
                <select asp-for="DatabaseImage" asp-items="@Model.DatabaseImages" class="form-control js-example-basic-single input-lg">
                    <option selected="selected" value="">Select an Database image if it needs to be deployed</option>
                </select>
                <span asp-validation-for="DatabaseImage" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Variables</label>
                <table id="parameters-table" class="table table-striped table-bordered" width="100%">
                    <thead>
                        <tr>
                            <th>Key</th>
                            <th>Value</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: Variables">
                        <tr>
                            <td><input data-bind='attr: { value: name, name: "Variables["+$index()+"].Name"}' class="form-control" required /></td>
                            <td><input data-bind='attr: { value: value, name: "Variables["+$index()+"].Value"}' class="form-control" required /></td>
                            <td><a href="#" data-bind="click: $root.removeItem" class="btn btn-danger">Remove</a></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="form-group pull-right">
                <button data-bind="click: addItem.bind($data, null)" class="btn btn-danger">Add Parameter</button>
            </div>
        </div>
            <div class="col-md-6">
                <div class="form-group">
                    <input type="submit" value="Create" class="btn btn-primary btn-lg" />
                </div>
            </div>
        </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.2/knockout-min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout.mapping/2.4.1/knockout.mapping.min.js"></script>
    <script>
        $(function () {
            var items = @Html.Raw(Json.Serialize(Model.Variables));
            ko.applyBindings(viewModel);

            $.each(items, function (i, item) {
                var variableItem = new Variable(item);
                viewModel.Variables.push(variableItem);
            });
        });

        function Variable(item) {
                var self = this;
                self.name = item.name;
                self.value = item.value;
            }

            var viewModel = {
                Variables: ko.observableArray(),
                addItem: function (select) {
                    var preItem = @Html.Raw(Json.Serialize(new Docker.Benchmarking.Orchestrator.Web.ViewModels.ApplicationTestVariableViewModel()));
                    if (select == null) {
                        var item = new Variable(preItem);
                        return viewModel.Variables.push(item);
                    }
                },
                removeItem: function (item) { viewModel.Variables.remove(item) }
            };

    </script>
}
