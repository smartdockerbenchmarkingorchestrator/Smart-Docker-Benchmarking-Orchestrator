@model Docker.Benchmarking.Orchestrator.Web.ViewModels.BenchmarkTestViewModel

@{
    ViewData["Title"] = "WebServer Results for Benchmark Experiment:" + Model.BenchmarkExperimentId;
}
<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h4">@ViewData["Title"]</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group mr-2">
            <button class="btn btn-sm btn-outline-secondary" id="btn-export">Export</button>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h2>Benchmark WebServer Data</h2><hr />
        @await Component.InvokeAsync("BenchmarkWebServerTable", new { applicationTestId = Model.BenchmarkExperimentId })
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            var table = $('#web-server-benchmark-table').DataTable({
                dom: 'Bfrtip',
                paging: false,
                saveState: true,
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ],
                initComplete: function () {
                    this.api().columns().every(function () {
                        var column = this;
                        var select = $('<select><option value=""></option></select>')
                            .appendTo($(column.footer()).empty())
                            .on('change', function () {
                                var val = $.fn.dataTable.util.escapeRegex(
                                    $(this).val()
                                );

                                column
                                    .search(val ? '^' + val + '$' : '', true, false)
                                    .draw();
                            });

                        column.data().unique().sort().each(function (d, j) {
                            select.append('<option value="' + d + '">' + d + '</option>');
                        });
                    });
                }
            });

            $('a.toggle-vis').on('click', function (e) {
                e.preventDefault();

                // Get the column API object
                var column = table.column($(this).attr('data-column'));

                // Toggle the visibility
                column.visible(!column.visible());
            });
        });

            $.ajax({
                    type: "get",
                    url: "/api/GraphResults/GetContainerMetricsForBenchmark",
                    data: { 'id': '@Model.BenchmarkExperimentId' },
                    contentType: "application/json; charset=utf-8",
                    async: true,
                    dataType: "json",
                    success: function (response) {
                        if (response) {
                            var labelArray = response.map(function (el) { var d = new Date(el.dateTimeUtc); return formatDateForGraphLabel(d); });

                            var cpuData = response.map(function (el) { return el.cpuPercentage; });
                            var cpuCtx = document.getElementById("cpuStats");
                            graph(cpuCtx, labelArray, cpuData, 'CPU Percentage');

                            var memoryData = response.map(function (el) { return el.memoryPercentage; });
                            var memoryCtx = document.getElementById("memoryStats");
                            graph(memoryCtx, labelArray, memoryData, 'Memory Percentage');


                            var networkInput = response.map(function (el) { return el.networkInput; });
                            var networkOutput = response.map(function (el) { return el.networkOutput; });
                            var networkCtx = document.getElementById("networkIO");
                            graph2Data(networkCtx, labelArray, networkInput, networkOutput, 'Network Input', 'Network Output');

                            var blockInput = response.map(function (el) { return el.blockInput; });
                            var blockOutput = response.map(function (el) { return el.blockOutput; });
                            var blockCtx = document.getElementById("blockIO");
                            graph2Data(blockCtx, labelArray, blockInput, blockOutput, 'Block Input', 'Block Output');


                        }
                    },
                    failure: function (response) {
                        console.log(response.responseText);
                    },
                    error: function (response) {
                        console.log(response.responseText);
                    }
                });

            function graph(ctx, labelArray, data, label) {
                var myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labelArray,
                        datasets: [{
                            data: data,
                            label: label,
                            lineTension: 0,
                            backgroundColor: 'transparent',
                            borderColor: '#007bff',
                            borderWidth: 4,
                            pointBackgroundColor: '#007bff'
                        }]
                    },
                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: false
                                }
                            }]
                        },
                        legend: {
                            display: false,
                        }
                    }
                });
            }

            function graph2Data(ctx, labelArray, data, data2, label1, label2) {
                var myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labelArray,
                        datasets: [{
                            label: label1,
                            data: data,
                            lineTension: 0,
                            backgroundColor: 'transparent',
                            borderColor: '#007bff',
                            borderWidth: 4,
                            pointBackgroundColor: '#007bff'
                        }, {
                                label: label2,
                                data: data2,
                                lineTension: 0,
                                backgroundColor: 'transparent',
                                borderColor: '#0cdc42',
                                borderWidth: 4,
                                pointBackgroundColor: '#0cdc42'
                            }
                        ]
                    },

                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: false
                                }
                            }]
                        },
                        legend: {
                            display: false,
                        }
                    }
                });
            }



            $('#btn-export').click(function () {
                $.ajax({
                    url: "@Url.Action("ExportWebServerResultsToCsv", "GraphResults", new { id = Model.BenchmarkExperimentId })",
                    method: "POST",
                    //xhrFields: {
                    //    responseType: 'blob'
                    //},
                    })
                    .done(function (response, status, xhr) {
                        var filename = "";
                        var disposition = xhr.getResponseHeader('Content-Disposition');
                        if (disposition && disposition.indexOf('attachment') !== -1) {
                            var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                            var matches = filenameRegex.exec(disposition);
                            if (matches != null && matches[1]) filename = matches[1].replace(/['"]/g, '');
                        }

                        var type = xhr.getResponseHeader('Content-Type');
                        var blob = new Blob([response], { type: type });

                        if (typeof window.navigator.msSaveBlob !== 'undefined') {
                            // IE workaround for "HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed."
                            window.navigator.msSaveBlob(blob, filename);
                        } else {
                            var URL = window.URL || window.webkitURL;
                            var downloadUrl = URL.createObjectURL(blob);

                            if (filename) {
                                // use HTML5 a[download] attribute to specify filename
                                var a = document.createElement("a");
                                // safari doesn't support this yet
                                if (typeof a.download === 'undefined') {
                                    window.location = downloadUrl;
                                } else {
                                    a.href = downloadUrl;
                                    a.download = filename;
                                    document.body.appendChild(a);
                                    a.click();
                                }
                            } else {
                                window.location = downloadUrl;
                            }

                            setTimeout(function () { URL.revokeObjectURL(downloadUrl); }, 100); // cleanup
                        }
                        toastr.success('File should be downloading now.', 'Success');
                    })
                    .fail(function (xhr) {
                        console.log('error', xhr);
                    });
            });


    </script>
}
