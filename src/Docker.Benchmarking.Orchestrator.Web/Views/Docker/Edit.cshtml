@model Docker.Benchmarking.Orchestrator.Web.ViewModels.EditDockerImageViewModel

@{
    ViewData["Title"] = "Edit Docker Image";
}

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
    <h1 class="h2">@ViewData["Title"]</h1>
</div>

<form asp-action="Edit" method="post">
    <div class="row">
        <div class="col-md-12">
            <div asp-validation-summary="All" class="text-danger"></div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ImageName" class="control-label"></label>
                <input asp-for="ImageName" class="form-control" />
                <span asp-validation-for="ImageName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ImageTag" class="control-label"></label>
                <input asp-for="ImageTag" class="form-control" />
                <span asp-validation-for="ImageTag" class="text-danger"></span>
            </div>
            <div class="form-group">
                <div class="checkbox">
                    <label>
                        <input asp-for="Active" /> @Html.DisplayNameFor(model => model.Active)
                    </label>
                </div>
            </div>
            <div class="form-group">
                <label asp-for="ExternalPort" class="control-label"></label>
                <input asp-for="ExternalPort" class="form-control" />
                <span asp-validation-for="ExternalPort" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="InternalPort" class="control-label"></label>
                <input asp-for="InternalPort" class="form-control" />
                <span asp-validation-for="InternalPort" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ImageType" class="control-label"></label>
                <select asp-for="ImageType" class="form-control js-example-basic-single input-lg" asp-items="Html.GetEnumSelectList<Docker.Benchmarking.Orchestrator.Core.Enums.ImageType>()">
                    <option selected="selected" value="">Please select an image type</option>
                </select>
                <span asp-validation-for="ImageType" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="checkbox">
                    <label>
                        <input asp-for="PrivateRepository" /> @Html.DisplayNameFor(model => model.PrivateRepository)
                    </label>
                </div>
            </div>
            <div id="PrivateRegistrySection" class="d-none">
                <div class="form-group">
                    <label asp-for="PrivateRepositoryHost" class="control-label"></label>
                    <input asp-for="PrivateRepositoryHost" class="form-control" />
                    <span asp-validation-for="PrivateRepositoryHost" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="PrivateRepositoryUsername" class="control-label"></label>
                    <input asp-for="PrivateRepositoryUsername" class="form-control" />
                    <span asp-validation-for="PrivateRepositoryUsername" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="PrivateRepositoryPassword" class="control-label"></label>
                    <input asp-for="PrivateRepositoryPassword" class="form-control" />
                    <span asp-validation-for="PrivateRepositoryPassword" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group">
                <label class="control-label">Variables</label>
                <table id="parameters-table" class="table table-striped table-bordered" width="100%">
                    <thead>
                        <tr>
                            <th>Key</th>
                            <th>Value</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: Variables">
                        <tr>
                            <td><input data-bind='attr: { value: name, name: "Variables["+$index()+"].Name"}' class="form-control" required /></td>
                            <td><input data-bind='attr: { value: value, name: "Variables["+$index()+"].Value"}' class="form-control" required /></td>
                            <td><a href="#" data-bind="click: $root.removeItem" class="btn btn-danger">Remove</a></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="form-group pull-right">
                <button data-bind="click: addItem.bind($data, null)" class="btn btn-danger">Add Variable</button>
            </div>
        </div>
        <div class="col-md-12">
            <div class="form-group">
                <input asp-for="DateTimeCreated" type="hidden" />
                <input asp-for="Id" type="hidden" />

                <input type="submit" value="Save" class="btn btn-primary btn-lg" />
            </div>
        </div>
    </div>
</form>
<div>
    <a asp-action="Images">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.2/knockout-min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout.mapping/2.4.1/knockout.mapping.min.js"></script>

    <script>
        // A $( document ).ready() block.
        $(document).ready(function () {
            var isCHecked = $('#PrivateRepository').is(':checked');

            if (isCHecked)
                $("#PrivateRegistrySection").removeClass('d-none');

            $("#PrivateRepository").change(function () {
                if (this.checked) {
                    //Do stuff

                    $("#PrivateRegistrySection").removeClass('d-none');  // checked

                }
                else {
                    $("#PrivateRegistrySection").addClass('d-none');  // unchecked
                }
            });

            var items = @Html.Raw(Json.Serialize(Model.Variables));
            ko.applyBindings(viewModel);

            $.each(items, function (i, item) {
                var variableItem = new Variable(item);
                viewModel.Variables.push(variableItem);
            });

             
        });

        function Variable(item) {
                var self = this;
                self.name = item.name;
                self.value = item.value;
            }

            var viewModel = {
                Variables: ko.observableArray(),
                addItem: function (select) {
                    var preItem = @Html.Raw(Json.Serialize(new Docker.Benchmarking.Orchestrator.Web.ViewModels.BenchmarkExperimentVariableViewModel()));
                    if (select == null) {
                        var item = new Variable(preItem);
                        return viewModel.Variables.push(item);
                    }
                },
                removeItem: function (item) { viewModel.Variables.remove(item) }
            };
    </script>
}
